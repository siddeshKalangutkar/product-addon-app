{% if template contains "product" %}
    <div id="product_addon_app">
        <div class="addon-modal-overlay"></div>
        <div class="addon-modal">
            <div class="addon-modal-header">
                <div class="close-btn">
                    <div class="line"></div>
                    <div class="line" style="transform: rotate(-45deg);"></div>
                </div>
            </div>
            <div class="addon-modal-body">
                {% comment %}
                {% assign meta_string =  product.metafields.app_meta | json | replace: '"', '' | replace: '{','' | replace: "}" , "" %}
                {% assign meta_field_string = meta_string | split: "," %}
                {% for meta_item in meta_field_string %}
                    {% assign meta_item_value = meta_item | split: ":" %}
                    <p class="addon-rule-title">{{meta_item_value[0]}}</p>

                    {% if meta_item_value[1] contains "collections" %}
                        {% assign collection_handle_array = meta_item_value[1] | replace: "[" , "" | replace: "]" , "" | split: "|" %}
                        {% assign collection_handles = collection_handle_array[1] | split: ";" %}
                        {% for handle in collection_handles %}
                            {% assign handle_format = handle | strip %}
                            {% for addon_product in collections[handle_format].products %}
                            <span class="addon-rule-item">
                                {{addon_product.title}}
                                <span>
                                    (+{{addon_product.selected_or_first_available_variant.price | money}})
                                    <input type="checkbox" class="addon-input" value="{{addon_product.selected_or_first_available_variant.id}}" data-addon-title="{{addon_product.title}}" data-addon-price="{{addon_product.selected_or_first_available_variant.price | money_without_currency }}">
                                </span>
                            </span>
                            {% endfor %}
                        {% endfor %}
                    {% endif %}

                    {% if meta_item_value[1] contains "products" %}
                        {% assign product_handle_array = meta_item_value[1] | replace: "[" , "" | replace: "]" , "" | split: "|" %}
                          {% assign product_handles = product_handle_array[1] | split: ";" %}
                              {% for handle in product_handles %}
                                {% assign handle_format = handle | strip %}
                                <span class="addon-rule-item">
                                    {{all_products[handle_format].title}}
                                    <span>
                                        (+{{all_products[handle_format].selected_or_first_available_variant.price | money}})
                                        <input type="checkbox" class="addon-input" value="{{all_products[handle_format].selected_or_first_available_variant.id}}" data-addon-title="{{all_products[handle_format].title}}" data-addon-price="{{all_products[handle_format].selected_or_first_available_variant.price | money_without_currency }}">
                                    </span>
                                </span>
                              {% endfor %}
                    {% endif%}

                {% endfor %}
                {% endcomment %}
                    {% assign meta_string =  product.metafields.app_meta %}
                    {% for meta in meta_string %}
                    <div class="addon-rule-container">
                        <p class="addon-rule-title">{{ meta.first }}</p>
                        {% for meta_items in meta.last.value %}
                        <span class="addon-rule-item">
                            <span class="name">{{ meta_items.first }}</span>
                            <span class="price">
                            (+{{ meta_items.last | times: 100.00 | money }})
                            <div class="addon-checkbox">
                                <input type="checkbox" class="addon-input" value="{{ meta_items.first }}" data-addon-title="{{ meta_items.first }}" data-addon-price="{{ meta_items.last | times: 100.00 | money_without_currency }}">
                                <span class="addon-ctm-checkbox"></span>
                            </div>
                            </span>
                        </span>
                        {% endfor %}
                    </div>
                {% endfor %}
                <button class="addon-atc">Add To Cart</button>
            </div>
        </div>
    </div>
    <script>
        // adding event on ATC button on product page
        let submt = document.querySelector('[type=submit]');
        submt.addEventListener("click", function (event) {
            event.preventDefault();
            document.getElementById('product_addon_app').classList.add("active")
        })
    </script>
{% endif %}

{% if template contains 'cart' %}
    <script>
        window.pdtAddOn = {{ cart | json }};

        window.pdtAddonUpdate = function(cart_obj) {
            let price_array = cart_obj.items.map(item => { return ( Math.round ( ( ( item.properties._addon_price * item.quantity + ( item.final_line_price / 100 ) ) + Number.EPSILON ) * 100 ) / 100 )})
            let total_cart_price = price_array.reduce((a, b) => a + b, 0)
            {% if block.settings.total_price_selector != blank %}
            let total_price_element = document.querySelector('{{ block.settings.total_price_selector }}')
            {% endif %}
            total_price_element.innerHTML = "{{ 0 | money_with_currency | money_without_trailing_zeros | remove: '0' }}" + total_cart_price;
            {% if block.settings.cart_item_selector != blank %}
            let cart_item_list = document.querySelectorAll('{{ block.settings.cart_item_selector }}')
            {% endif %}
            let cart_items = [...cart_item_list]
            for(i=0 ; i < cart_items.length ; i++ ){
                if (price_array[i]){
                    {% if block.settings.end_price_selector != blank %}
                    let price_element_list = cart_items[i].querySelectorAll('{{ block.settings.end_price_selector }}')
                    {% endif %}
                    let price_elements = [...price_element_list]
                    for(j = 0 ; j < price_elements.length ; j++ ){
                        price_elements[j].innerHTML = "{{ 0 | money_with_currency | money_without_trailing_zeros | remove: '0' }} " + price_array[i];
                    }
                    console.log(i + ". " + "main product")
                }
                else{
                    cart_items[i].style.display = "none";
                    console.log(i + ". " + "addon")
                }
            }
        }
        window.pdtAddonUpdate(window.pdtAddOn);

        (function(ns, fetch) {
            if (typeof fetch !== 'function') return;
            ns.fetch = function() {
              var output = fetch.apply(this, arguments);
              //output.then(({ ok }) => setTimeout(function(){window.pdtAddonUpdate(window.pdtAddOn)},20));
              output.then(res => { 
                let clone_output = res.clone();
                return clone_output.json()}).then( json_data => setTimeout(function(){window.pdtAddonUpdate(json_data)},20))
              return output;
            }
        }(window, window.fetch))

        // adding event on checkout button on cart page
        let submt = document.querySelector('[type=submit]');
        submt.addEventListener("click", function (event) {
            event.preventDefault();
            checkout(this);
        })

        //TODO
        async function checkout(checkout_btn){

            const spinner_code_block = `<div class="loading-overlay"><div class="loading-overlay__spinner"><svg height="20" width="20" aria-hidden="true" focusable="false" role="presentation" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg"><circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle></svg></div></div>`
            checkout_btn.classList.add("loading-spinner");
            checkout_btn.innerHTML += spinner_code_block;

            let cart_data_response = await fetch('/cart.js')
            let {items, cart_level_discount_applications} = await cart_data_response.json()
            let data = [];
            let draft_line_items = items.map( item => {
                let item_properties = []
                for (const key in item.properties) {
                    item_properties.push({key: key , value : ""+item.properties[key]})
                }
                let item_data = { variantId : "gid://shopify/ProductVariant/"+item.variant_id, quantity : item.quantity, customAttributes: item_properties }
                if (item.discounts.length > 0){
                    item_data['appliedDiscount'] = { title: item.discounts[0].title, valueType: "FIXED_AMOUNT", value: (item.discounts[0].amount / (100 * item.quantity))}
                }
                data.push(item_data)
                let addon_array = item.properties._addon_titles.split(",");
                addon_array.forEach( add_on => !(add_on === "") ? data.push({title: add_on, quantity: item.quantity, originalUnitPrice: item.properties[add_on] }):"")
            } )
            let data_format = {
                lineItems: data
            }
            if (cart_level_discount_applications.length > 1){
                cart_level_discount_applications.each( discount => {
                    data_format["appliedDiscount"] = {title : discount.title, valueType: discount.value_type.toUpperCase(), value: parseFloat(discount.value)}
                })
            }
            console.log("data json", data_format)
            //let data_string = JSON.stringify(data_format).replace(/"/gi,'\\"')
            let data_string = JSON.stringify(data_format)
            console.log("data string", data_string)

            //make api call
            var requestOptions = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ data: data_string, shop: window.location.hostname }),
                redirect: 'follow'
              };
            fetch('https://bc23-206-84-237-27.ngrok.io/api/checkout', requestOptions)
            .then( res => res.json() )
            .then( data => window.location.href = data.url )
        }
    </script>
{% endif %}

{% schema %}
{
  "name": "Product Addons Block",
  "target": "body",
  "stylesheet": "theme-extension.css",
  "javascript": "theme-extension.js",
  "settings": [
    {
        "type": "text",
        "id": "cart_item_selector",
        "default":".cart-item",
        "label": "Cart Item Selector"
    },
    {
        "type": "text",
        "id": "total_price_selector",
        "default":".totals__subtotal-value",
        "label": "Total Price Selector"
    },
    {
        "type": "text",
        "id": "end_price_selector",
        "default":".price.price--end",
        "label": "Subtotal Price Selector"
    }
  ]
}
{% endschema %}